<div
    class="flex-1 overflow-y-hidden overflow-x-hidden flex flex-col items-start justify-start gap-4 animate-fade-in-down transition-opacity duration-500 ease-out">

    <div class="w-full flex flex-row items-center justify-end flex-wrap gap-2">
        <button id="btnCreateMember"
            class="w-40 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i
                class='bx bxs-add-to-queue'></i>
            <%= i18n.__('createMember') %>
        </button>
    </div>

    <div class="w-full flex items-center justify-between flex-col md:flex-row gap-4">
        <label for="table-search" class="sr-only">Search</label>
        <div class="flex-1 w-full relative">
            <div class="absolute inset-y-0 rtl:inset-r-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                </svg>
            </div>
            <input type="text" id="table-search-members"
                class="block pt-2 ps-10 text-sm rounded-lg w-full sm:w-80 text-light-text  bg-light-background border border-light-text dark:text-dark-text dark:bg-dark-background dark:border-dark-text focus:ring-0"
                placeholder="<%= i18n.__('searchMember') %>">
        </div>

        <div class="w-full flex flex-row items-center justify-end gap-4 flex-wrap">
            <select id="siteFilter"
                class="w-full sm:w-40 font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text  bg-light-background border border-light-text dark:text-dark-text dark:bg-dark-background dark:border-dark-text focus:ring-0">
                <option value="">
                    ไซต์ ทั้งหมด
                </option>
                <% siteWithMembers.forEach(site=> { %>
                    <option value="<%= site.id %>">
                        <%= site.name %>
                    </option>
                    <% }) %>
            </select>
            <select id="roleFilter"
                class="w-full sm:w-40 font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text  bg-light-background border border-light-text dark:text-dark-text dark:bg-dark-background dark:border-dark-text focus:ring-0">
                <option value="">
                    <%= i18n.__('allRole') %>
                </option>
                <% allRole.forEach(role=> { %>
                    <option value="<%= role %>">
                        <%= role %>
                    </option>
                    <% }) %>
            </select>
            <select id="roleSiteFilter"
                class="w-full sm:w-40 font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text  bg-light-background border border-light-text dark:text-dark-text dark:bg-dark-background dark:border-dark-text focus:ring-0">
                <option value="">
                    <%= i18n.__('allRoleInSite') %>
                </option>
                <% allRoleSite.forEach(ars=> { %>
                    <option value="<%= ars %>">
                        <%= ars %>
                    </option>
                    <% }) %>
            </select>
        </div>
    </div>

    <div class="w-full flex-1 relative overflow-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left text-light-text dark:text-dark-text">
        </table>
    </div>

    <div id="paginationContainer" class="w-full flex items-center justify-between">

    </div>

</div>


<script>
    var translations={
        createMember: "<%= i18n.__('createMember') %>",
        enabled: "<%= i18n.__('enabled') %>",
        disabled: "<%= i18n.__('disabled') %>",
        status: "<%= i18n.__('status') %>",
        username: "<%= i18n.__('username') %>",
        memberName: "<%= i18n.__('memberName') %>",
        email: "<%= i18n.__('email') %>",
        role: "<%= i18n.__('role') %>",
        cancle: "<%= i18n.__('cancle') %>",
        create: "<%= i18n.__('create') %>",
        change: "<%= i18n.__('change') %>",
        showing: "<%= i18n.__('showing') %>",
        to: "<%= i18n.__('to') %>",
        of: "<%= i18n.__('of') %>",
        entries: "<%= i18n.__('entries') %>",
        delete: "<%= i18n.__('delete') %>",
        deleteConfirm: "<%= i18n.__('deleteConfirm') %>",
        textDelete: "<%= i18n.__('textDelete') %>",
        ok: "<%= i18n.__('ok') %>",
        error: "<%= i18n.__('error') %>",
        success: "<%= i18n.__('success') %>",
        noMember: "<%= i18n.__('noMember') %>",
    };
    const siteWithMembers=<%- JSON.stringify(siteWithMembers)%>;
    const memberList=<%- JSON.stringify(allMember)%>;
    const roleList=<%- JSON.stringify(allRole)%>;
    const enabledList=<%- JSON.stringify(allEnabled)%>;
    const roleSiteList=<%- JSON.stringify(allRoleSite)%>;
    const tableBody=document.querySelector("table");
    const searchInput=document.getElementById("table-search-members");
    const paginationContainer=document.getElementById('paginationContainer');
    const roleFilter=document.getElementById('roleFilter');
    const roleSiteFilter=document.getElementById('roleSiteFilter');
    const siteFilter=document.getElementById('siteFilter');

    let currentPage=1;
    const itemsPerpage=5;

    function createTableRow(site) {
        const colorRole={
            Owner: "text-blue-500",
            Agent: "text-orange-500",
            Customer: "text-cyan-600 dark:text-cyan-400",
            Technician: "text-purple-500",
        };

        const row=document.createElement("tbody");
        row.className="bg-light-secondary dark:bg-dark-secondary";

        let rowContent=`
            <tr>
                <th colspan="6" class="px-6 py-4 font-semibold text-left bg-gray-200 dark:bg-gray-800">
                    <div class="w-full flex items-center justify-between">
                        <span><i class='bx bxs-buildings'></i> ${site.name}</span>
                            <button id="btnAddMemberInSite-${site.id}">
                                <i class='bx bxs-user-plus' ></i>
                            </button>
                     </div>
                </th>
            </tr>`;

        if (site.members.length>0) {
            rowContent+=site.members.map((member, idx) => {
                const roleSite=member.sites.find(rs => rs.site_id==site.id)
                return `
                <td class="px-6 py-4">${idx+1}</td>
                <td scope="row" class="flex items-center px-6 py-4 text-light-text whitespace-nowrap dark:text-dark-text">
                    ${member.image?
                        `<img class="w-10 h-10 rounded-full" src="/docs/images/people/profile-picture-1.jpg" alt="Profile">`:
                        `<div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">${member.member_name.charAt(0)}</div>`
                    }
                    <div class="ps-3">
                        <div class="text-base font-semibold">${member.member_name}</div>
                        <div class="font-normal text-gray-500">${member.email}</div>
                    </div>
                </td>
                <td class="px-6 py-4 ${colorRole[member.role]}">${member.role} | ${roleSite.site_role}</td>
                <td class="px-6 py-4 flex gap-4">
                    <button id="btnUpdateMember-${site.id}-${member.id}" class="font-medium text-lg text-yellow-400 dark:text-yellow-400">
                        <i class='bx bxs-edit-alt'></i>
                    </button>
                    <button id="btnDeleteConfirm-${site.id}-${member.id}" class="font-medium text-lg text-red-500 dark:text-red-500">
                        <i class='bx bxs-trash'></i>
                    </button>
                </td>
            </tr>`;
            }).join('');
        } else {
            rowContent+=`
            <tr>
                <td colspan="6" class="px-6 py-4 text-light-text dark:text-dark-text text-center">${translations.noMember}</td>
            </tr>`;
        }

        row.innerHTML=rowContent;
        return row;
    }


    function renderTable(page, filteredData) {
        tableBody.innerHTML="";

        if (filteredData.length===0) {
            tableBody.innerHTML=`
            <tr>
                <td colspan="6" class="text-center text-gray-500 dark:text-gray-400 py-4">
                    No results found
                </td>
            </tr>
        `;
            updatePaginationButtons(filteredData);
            return;
        }
        const start=(page-1)*itemsPerpage;
        const end=start+itemsPerpage;
        const paginatedItems=filteredData.slice(start, end);
        // (start+index+1)

        paginatedItems.forEach((site, index) => {
            tableBody.appendChild(createTableRow(site));

            site.members.forEach((member) => {
                document.getElementById(`btnUpdateMember-${site.id}-${member.id}`).addEventListener(('click'), (e) => {
                    const currentSite=member.sites.find(m => m.site_id==site.id);
                    const optionSite=siteWithMembers
                        .map(s => {
                            return `<option value="${s.id}" ${s.id==site.id? "selected":""}>${s.name}</option>`
                        })
                    const roleSite=member.sites.find(rs => rs.site_id==site.id);
                    const optionRoleSite=roleSiteList
                        .map(rs => {
                            return `<option value="${rs}" ${rs==roleSite.site_role? "selected":""}>${rs}</option>`
                        })
                    let content=`
                    <form id="updateMemberForm" class="space-y-4">
                        <div class="grid grid-cols-6 gap-4">
                            <div class="col-span-6 sm:col-span-3">
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Site</label>
                                <select name="site_id" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                                    ${optionSite}
                                </select>
                            </div>
                             <div class="col-span-6 sm:col-span-3">
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Site Access</label>
                                <select name="site_role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                                    ${optionRoleSite}
                                </select>
                            </div>
                        </div>
                        <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                            <button type="button" onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                            <button type="submit" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-edit-alt' ></i>${translations.change}</button>
                        </div>
                    </form>
                    `
                    showModal(`${member.member_name}`, content);
                    handleUpdateMemberForm(member.id, currentSite.site_id);
                })

                document.getElementById(`btnDeleteConfirm-${site.id}-${member.id}`).addEventListener(('click'), (e) => {
                    let content=`
                    <p class="text-light-text dark:text-dark-text">${translations.textDelete} <span class="text-red-500 underline">${member.member_name}</span> ?</p>
                    <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                        <button onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                        <button id="btnDeleteMember-${site.id}-${member.id}" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-trash'></i>${translations.delete}</button>
                    </div>
                        `
                    showModal(translations.deleteConfirm, content,);
                    handleDeleteMember(site.id, member.id);
                })

            })

            document.getElementById(`btnAddMemberInSite-${site.id}`).addEventListener('click', () => {
                const siteMemberIds=new Set(site.members.map(m => m.id));
                const nonSiteMembers=memberList.filter(m => !siteMemberIds.has(m.id));
                const optionMember=nonSiteMembers
                    .map(member => `<option value="${member.id}">${member.member_name}</option>`)
                    .join('');
                const optionRoleSite=roleSiteList
                    .map(rs => `<option value="${rs}">${rs}</option>`)
                    .join('');

                let content=`
                    <form id="addMemberToSiteForm" class="space-y-4">
                        <div class="grid grid-cols-6 gap-4">
                            <div class="col-span-6 sm:col-span-3">
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Member List</label>
                                <select name="member_id" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                                ${optionMember}
                                </select>
                            </div>
                            <div class="col-span-6 sm:col-span-3">
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Role In Site</label>
                                <select name="site_role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                                ${optionRoleSite}
                                </select>
                            </div>
                        </div>
                        <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                            <button type="button" onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                            <button type="submit" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-add-to-queue'></i>${translations.create}</button>
                        </div>
                    </form>`

                showModal(`${translations.createMember} ${site.name}`, content)
                handleAddMemberToSiteForm(site.id);
            })
        });

        updatePaginationButtons(filteredData);
    }


    function updatePaginationButtons(filteredData) {
        paginationContainer.innerHTML="";
        const totalPages=Math.ceil(filteredData.length/itemsPerpage);
        paginationContainer.innerHTML=`
        <div class="block">${translations.showing} ${(currentPage-1)*itemsPerpage+1} ${translations.to} 
            ${Math.min(currentPage*itemsPerpage, filteredData.length)} ${translations.of} ${filteredData.length} ${translations.entries}</div>
        <div class="flex items-center gap-2">
            <button id="prevBtn"
                class="inline-flex items-center hover:bg-light-primary hover:dark:bg-dark-primary rounded-full p-2">
                <i class='bx bx-chevron-left'></i>
            </button>
            <span>${currentPage} / ${totalPages}</span>
            <button id="nextBtn"
                class="inline-flex items-center hover:bg-light-primary hover:dark:bg-dark-primary rounded-full p-2">
                <i class='bx bx-chevron-right'></i>
            </button>
        </div>
    `;
        const prevBtn=document.getElementById('prevBtn');
        prevBtn.disabled=currentPage==1;
        prevBtn.addEventListener("click", () => changePage(currentPage-1, filteredData));
        const nextBtn=document.getElementById('nextBtn');
        nextBtn.disabled=currentPage==totalPages;
        nextBtn.addEventListener("click", () => changePage(currentPage+1, filteredData));
    }


    function changePage(page, filteredData) {
        if (page>=1&&page<=Math.ceil(siteWithMembers.length/itemsPerpage)) {
            currentPage=page;
            renderTable(page, filteredData);
        }
    }


    function filterTable() {
        const searchValue=searchInput.value.trim().toLowerCase();
        const siteValue=siteFilter.value;
        const roleValue=roleFilter.value;
        const roleSiteValue=roleSiteFilter.value;

        if (!searchValue&&!siteValue&&!roleValue&&!roleSiteValue) {
            return renderTable(currentPage, siteWithMembers);
        }

        const filteredSites=siteWithMembers.map(site => {
            const filteredMembers=site.members.filter(member => {
                const matchesSearch=
                    member.member_name.toLowerCase().includes(searchValue)||
                    member.email.toLowerCase().includes(searchValue);

                const matchesSite=siteValue===""||site.id==siteValue;
                const matchesRole=roleValue===""||member.role===roleValue;
                const matchesRoleSite=roleSiteValue===""||member.sites.some(ms => ms.site_role===roleSiteValue);

                return matchesSearch&&matchesSite&&matchesRole&&matchesRoleSite;
            });

            return {
                id: site.id,
                name: site.name,
                members: filteredMembers
            };
        }).filter(site => site.members.length>0);

        currentPage=1;
        renderTable(currentPage, filteredSites);
    }

    renderTable(currentPage, siteWithMembers);
    searchInput.addEventListener("input", filterTable);
    roleFilter.addEventListener("change", filterTable);
    roleSiteFilter.addEventListener("change", filterTable);
    siteFilter.addEventListener("change", filterTable);



    function handleCreateMemberForm() {
        const form=document.getElementById('createMemberForm')
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData=new FormData(form);
            const memberData={
                username: formData.get("username"),
                member_name: formData.get("member_name"),
                email: formData.get("email"),
                role: formData.get("role"),
                site_id: formData.get("site_id"),
                site_role: formData.get("site_role"),
            };
            try {
                const response=await fetch("/api/create-member", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(memberData),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to create member");
                }

                showModalPopup(result.message, true);
                form.reset();
            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

    function handleAddMemberToSiteForm(site_id) {
        const form=document.getElementById('addMemberToSiteForm')
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData=new FormData(form);
            const memberData={
                member_id: formData.get("member_id"),
                site_role: formData.get("site_role"),
            };
            try {
                const response=await fetch(`/api/add-member/${site_id}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(memberData),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to create member");
                }

                showModalPopup(result.message, true);
                form.reset();
            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

    function handleDeleteMember(site_id, member_id) {
        const btn=document.getElementById(`btnDeleteMember-${site_id}-${member_id}`);
        btn.addEventListener('click', async (e) => {
            try {
                const response=await fetch(`/api/delete-member/${site_id}/${member_id}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to delete member");
                }

                showModalPopup(result.message, true);

            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

    function handleUpdateMemberForm(member_id, current_site) {
        const form=document.getElementById('updateMemberForm')
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData=new FormData(form);
            const memberData={
                site_id: formData.get("site_id"),
                site_role: formData.get("site_role"),
            }
            try {
                const response=await fetch(`/api/update-member/${current_site}/${member_id}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(memberData),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to update member");
                }

                showModalPopup(result.message, true);
            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }


    // modal ******************************************************************************

    document.getElementById('btnCreateMember').addEventListener('click', () => {
        const optionRole=roleList
            .map(role => {
                return `<option value="${role}">${role}</option>`
            }).join('');
        const optionSite=siteWithMembers
            .map(site => {
                return `<option value="${site.id}">${site.name}</option>`
            }).join('');
        const optionRoleSite=roleSiteList
            .map(roleSite => {
                return `<option value="${roleSite}">${roleSite}</option>`
            })

        let content=`
        <form id="createMemberForm" class="space-y-4">
            <div class="grid grid-cols-6 gap-4">
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">${translations.username}</label>
                    <input name="username" type="text" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">${translations.memberName}</label>
                    <input name="member_name" type="text" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise streetlight" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">${translations.email}</label>
                    <input name="email" input="email" type="email" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise@lekise.com" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">${translations.role}</label>
                    <select name="role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                        ${optionRole}
                    </select>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Site Access</label>
                    <select name="site_id" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                        ${optionSite}
                    </select>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Role In Site</label>
                    <select name="site_role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                        ${optionRoleSite}
                    </select>
                </div>
            </div>
            <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                <button type="button" onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                <button type="submit" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-add-to-queue'></i>${translations.create}</button>
            </div>
        </form>`

        showModal(translations.createMember, content)
        handleCreateMemberForm();
    })





</script>