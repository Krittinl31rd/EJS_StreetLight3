<div
    class="p-4 flex-1 overflow-y-hidden overflow-x-hidden flex flex-col items-start justify-start gap-4 animate-fade-in-down transition-opacity duration-500 ease-out">

    <div class="w-full flex flex-row items-center justify-between flex-wrap gap-2">
        <h1 class="text-2xl font-bold mb-1">Member & Role</h1>
        <button id="btnCreateMember"
            class="w-40 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i
                class='bx bxs-add-to-queue'></i>
            <%= i18n.__('createMember') %>
        </button>
    </div>

    <div class="w-full flex flex-row items-center justify-end gap-2">

        <div class="flex-1 flex items-center justify-end gap-2">
            <div class="relative">
                <div class="absolute inset-y-0 rtl:inset-r-0 start-0 flex items-center ps-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                    </svg>
                </div>
                <input type="text" id="table-search-members"
                    class="block pt-2 ps-10 text-sm rounded-lg w-full sm:w-80 text-light-text  bg-light-background border border-gray-300 dark:text-dark-text dark:bg-dark-background dark:border-gray-800 focus:ring-0 focus:border-gray-300"
                    placeholder="<%= i18n.__('searchMember') %>" autocomplete="off">
            </div>
            <select id="roleSiteFilter"
                class="w-full sm:w-40 text-sm px-2 py-2 gap-1 rounded-lg  text-light-text  bg-light-background border border-gray-300 dark:text-dark-text dark:bg-dark-background dark:border-gray-800 focus:ring-0 focus:border-gray-300">
                <option value="">
                    <%= i18n.__('allRoleInSite') %>
                </option>
                <% allRoleSite.forEach(ars=> { %>
                    <option value="<%= ars %>">
                        <%= ars %>
                    </option>
                    <% }) %>
            </select>
        </div>
    </div>

    <div class="w-full flex-1 relative overflow-auto shadow-md sm:rounded-lg">
        <table class="w-full text-sm text-left rtl:text-right text-light-text dark:text-dark-text">
            <thead
                class="text-xs uppercase text-light-text bg-light-background dark:bg-dark-primary dark:text-dark-text">
                <tr>
                    <th scope="col" class="px-6 py-3">
                        Member details
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Role
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
    </div>

    <div id="paginationContainer" class="w-full flex items-center justify-between">

    </div>

</div>

<script>

    var translations={
        createMember: "<%= i18n.__('createMember') %>",
        enabled: "<%= i18n.__('enabled') %>",
        disabled: "<%= i18n.__('disabled') %>",
        status: "<%= i18n.__('status') %>",
        username: "<%= i18n.__('username') %>",
        memberName: "<%= i18n.__('memberName') %>",
        email: "<%= i18n.__('email') %>",
        role: "<%= i18n.__('role') %>",
        cancle: "<%= i18n.__('cancle') %>",
        create: "<%= i18n.__('create') %>",
        change: "<%= i18n.__('change') %>",
        showing: "<%= i18n.__('showing') %>",
        to: "<%= i18n.__('to') %>",
        of: "<%= i18n.__('of') %>",
        entries: "<%= i18n.__('entries') %>",
        delete: "<%= i18n.__('delete') %>",
        deleteConfirm: "<%= i18n.__('deleteConfirm') %>",
        textDelete: "<%= i18n.__('textDelete') %>",
        ok: "<%= i18n.__('ok') %>",
        error: "<%= i18n.__('error') %>",
        success: "<%= i18n.__('success') %>",
        noMember: "<%= i18n.__('noMember') %>",
    };
    const membersList=<%- JSON.stringify(membersList)%>;
    const roleSiteList=<%- JSON.stringify(allRoleSite)%>;
    const allRole=<%- JSON.stringify(allRole)%>;
    const siteID= <%- JSON.stringify(site_id)%>;
    const tableBody=document.querySelector("tbody");
    const roleSiteFilter=document.getElementById('roleSiteFilter');
    const searchInput=document.getElementById("table-search-members");
    const paginationContainer=document.getElementById('paginationContainer');


    let currentPage=1;
    const itemsPerpage=5;

    function createTableRow(member) {
        const row=document.createElement("tr");
        row.className="bg-gray-50 hover:bg-gray-100 border-b dark:bg-dark-secondary dark:hover:bg-dark-primary dark:border-b-gray-800";
        row.innerHTML=`
                    <td scope="row" class="flex items-center px-6 py-4 text-light-text whitespace-nowrap dark:text-dark-text">
                        ${member.image?
                `<img class="w-10 h-10 rounded-full" src="/docs/images/people/profile-picture-1.jpg" alt="Profile">`:
                `<div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">${member.member_name.charAt(0)}</div>`
            }
                        <div class="ps-3">
                            <div class="text-base font-semibold">${member.member_name}</div>
                            <div class="font-normal text-gray-500">${member.email}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4">${member.sites[0].site_role}</td>
                    <td class="px-6 py-4 flex gap-4">
                        <button data-tooltip-target="tooltipUpdateMember-${member.id}" id="btnUpdateMember-${member.id}" type="button" class="font-medium text-lg text-yellow-400 dark:text-yellow-400">
                            <i class='bx bxs-edit-alt'></i>
                        </button>
                        <button data-tooltip-target="tooltipDeleteConfirm-${member.id}" type="button" id="btnDeleteConfirm-${member.id}" class="font-medium text-lg text-red-500 dark:text-red-500">
                            <i class='bx bxs-trash'></i>
                        </button>
                        <div id="tooltipUpdateMember-${member.id}" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700">
                            Change role on site
                            <div class="tooltip-arrow" data-popper-arrow></div>
                        </div>
                        <div id="tooltipDeleteConfirm-${member.id}" role="tooltip" class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700">
                            Delete member on site
                            <div class="tooltip-arrow" data-popper-arrow></div>
                        </div>
                    </td>
        `;
        return row;
    }


    function renderTable(page, filteredData) {
        tableBody.innerHTML="";

        if (filteredData.length===0) {
            tableBody.innerHTML=`
            <tr>
                <td colspan="6" class="text-center text-gray-500 dark:text-gray-400 py-4">
                    No results found
                </td>
            </tr>
        `;
            updatePaginationButtons(filteredData);
            return;
        }

        const start=(page-1)*itemsPerpage;
        const end=start+itemsPerpage;
        const paginatedItems=filteredData.slice(start, end);
        // (start+index+1)

        paginatedItems.forEach((member, index) => {
            tableBody.appendChild(createTableRow(member));

            document.getElementById(`btnUpdateMember-${member.id}`).addEventListener('click', () => {
                const optionRoleSite=roleSiteList
                    .map(rs => {
                        return `<option value="${rs}" ${rs==member.sites[0].site_role? "selected":""}>${rs}</option>`
                    })
                let content=`
                    <form id="updateMemberForm" class="w-full h-full flex flex-col justify-between space-y-4">
                        <div class="grid grid-cols-6 gap-4">
                             <div class="col-span-6 sm:col-span-3">
                                <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Site Access</label>
                                <select name="site_role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                                ${optionRoleSite}
                                </select>
                            </div>
                        </div>
                        <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                            <button type="button" onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                            <button type="submit" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-edit-alt' ></i>${translations.change}</button>
                        </div>
                    </form>
                    `
                showModal(`${member.member_name}`, content);
                handleUpdateMemberForm(member.id, siteID)
            })

            document.getElementById(`btnDeleteConfirm-${member.id}`).addEventListener(('click'), (e) => {
                let content=`
                    <p class="text-light-text dark:text-dark-text">Are you sure delete <span class="text-red-500 underline">${member.member_name}</span> ?</p>
                    <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                        <button onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                        <button id="btnDeleteMember-${member.id}" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-trash'></i>${translations.delete}</button>
                    </div>
                        `
                showModal(translations.deleteConfirm, content,);
                handleDeleteMember(siteID, member.id);
            })

        });

        document.getElementById(`btnCreateMember`).addEventListener('click', () => {
            const optionRoleSite=roleSiteList
                .map(roleSite => {
                    return `<option value="${roleSite}">${roleSite}</option>`
                })
            let content=`
        <form id="createMemberForm" class="space-y-4">
            <div class="grid grid-cols-6 gap-4">
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Username</label>
                    <input autocomplete="off" name="username" type="text" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Member Name</label>
                    <input autocomplete="off" name="member_name" type="text" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise streetlight" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
                    <input autocomplete="off" name="email" input="email" type="email" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" placeholder="lekise@lekise.com" required>
                </div>
                <div class="col-span-6 sm:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Role In Site</label>
                    <select name="site_role" class="w-full text-light-text rounded-lg bg-light-background  dark:bg-dark-primary dark:text-dark-text" required>
                        ${optionRoleSite}
                    </select>
                </div>
            </div>
            <div class="flex items-center justify-end space-x-3 dark:border-gray-600">
                <button type="button" onclick="closeModal()" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg  text-light-text border border-light-text dark:text-dark-text dark:border-dark-text">${translations.cancle}</button>
                <button type="submit" class="w-24 flex items-center justify-center font-medium text-sm px-2 py-2 gap-1 rounded-lg text-dark-text bg-dark-background dark:text-light-text dark:bg-light-background"><i class='bx bxs-add-to-queue'></i>${translations.create}</button>
            </div>
        </form>`
            showModal(`Create Member`, content);
            handleCreateMemberForm();
        })

        updatePaginationButtons(filteredData);
    }

    function updatePaginationButtons(filteredData) {
        paginationContainer.innerHTML="";
        const totalPages=Math.ceil(filteredData.length/itemsPerpage);
        paginationContainer.innerHTML=`
        <div class="block">${translations.showing} ${(currentPage-1)*itemsPerpage+1} ${translations.to} 
            ${Math.min(currentPage*itemsPerpage, filteredData.length)} ${translations.of} ${filteredData.length} ${translations.entries}</div>
        <div class="flex items-center gap-2">
            <button id="prevBtn"
                class="inline-flex items-center hover:bg-light-primary hover:dark:bg-dark-primary rounded-full p-2">
                <i class='bx bx-chevron-left'></i>
            </button>
            <span>${currentPage} / ${totalPages}</span>
            <button id="nextBtn"
                class="inline-flex items-center hover:bg-light-primary hover:dark:bg-dark-primary rounded-full p-2">
                <i class='bx bx-chevron-right'></i>
            </button>
        </div>
    `;
        const prevBtn=document.getElementById('prevBtn');
        prevBtn.disabled=currentPage==1;
        prevBtn.addEventListener("click", () => changePage(currentPage-1, filteredData));
        const nextBtn=document.getElementById('nextBtn');
        nextBtn.disabled=currentPage==totalPages;
        nextBtn.addEventListener("click", () => changePage(currentPage+1, filteredData));
    }


    function changePage(page, filteredData) {
        if (page>=1&&page<=Math.ceil(membersList.length/itemsPerpage)) {
            currentPage=page;
            renderTable(page, filteredData);
        }
    }

    function filterTable() {
        const searchValue=searchInput.value.trim().toLowerCase();
        const roleSiteValue=roleSiteFilter.value;

        if (!searchValue&&!roleSiteValue) {
            return renderTable(currentPage, membersList);
        }

        const filteredMembers=membersList.filter(member => {
            const matchesSearch=
                member.member_name.toLowerCase().includes(searchValue)||
                member.email.toLowerCase().includes(searchValue);

            const matchesRoleSite=
                roleSiteValue===""||
                member.sites.some(site => site.site_role===roleSiteValue);

            return matchesSearch&&matchesRoleSite;
        });


        currentPage=1;
        renderTable(currentPage, filteredMembers);
    }

    renderTable(currentPage, membersList);
    searchInput.addEventListener("input", filterTable);
    roleSiteFilter.addEventListener("change", filterTable);

    function handleCreateMemberForm() {
        const form=document.getElementById('createMemberForm')
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData=new FormData(form);
            const memberData={
                username: formData.get("username"),
                member_name: formData.get("member_name"),
                email: formData.get("email"),
                role: allRole[0],
                site_id: siteID,
                site_role: formData.get("site_role"),
            };
            try {
                const response=await fetch(`/api/create-member/${siteID}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(memberData),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to create member");
                }

                showModalPopup(result.message, true);
                form.reset();
            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

    function handleUpdateMemberForm(member_id, currentSite) {
        const form=document.getElementById('updateMemberForm')
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData=new FormData(form);
            const memberData={
                site_id: currentSite,
                site_role: formData.get("site_role"),
            }
            // console.log(memberData)
            try {
                const response=await fetch(`/api/update-member/${currentSite}/${member_id}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(memberData),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to update member");
                }

                showModalPopup(result.message, true);
            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

    function handleDeleteMember(site_id, member_id) {
        const btn=document.getElementById(`btnDeleteMember-${member_id}`);
        btn.addEventListener('click', async (e) => {
            try {
                const response=await fetch(`/api/delete-member/${site_id}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ member_id }),
                });

                const result=await response.json();
                if (!response.ok) {
                    throw new Error(result.message||"Failed to delete member");
                }

                showModalPopup(result.message, true);

            } catch (error) {
                console.error("Error:", error.message);
                showModalPopup(error.message, false);
            }
        })
    }

</script>